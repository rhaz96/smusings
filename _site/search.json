[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reflections on statistics and data science",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJun 19, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nUsing reticulate with Anaconda (for Mac M1 folks)\n\n\n\n\n\n\n\nRStudio\n\n\nR + Python\n\n\n\n\n\n\n\n\n\n\n\nJun 19, 2023\n\n\nRobert Hazell\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJun 16, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2\n\n\nHere is another one\n\n2 + 4\n\n[1] 6"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/reticulate-anaconda/index.html",
    "href": "posts/reticulate-anaconda/index.html",
    "title": "Using reticulate with Anaconda (for Mac M1 folks)",
    "section": "",
    "text": "I’ve been using Python more than ever compared to R over the last 1.5 years, but I’m still fond for R. Also a bit weary of the R vs Python debates. Won’t be rehashing the arguments, but for those who’d like the best of both worlds, this article discusses how to integrate R and Python with RStudio using the reticulate package, assuming you use Anaconda to handle your Python needs (like I do). The reticulate documentation wasn’t too clear on this, so perhaps this post will add a bit more context."
  },
  {
    "objectID": "posts/reticulate-anaconda/index.html#oh-what-fun-with-m1",
    "href": "posts/reticulate-anaconda/index.html#oh-what-fun-with-m1",
    "title": "Using reticulate with Anaconda (for Mac M1 folks)",
    "section": "Oh What Fun with M1",
    "text": "Oh What Fun with M1\nAfter 5.5 years with an Intel-based MacBook Air, moving to the M1 MBA was a well-deserved upgrade. But with it comes some back-end changes to how software is run due to the M1 SoC. Such is the case with reticulate and Anaconda.\nThe basic issue is you can’t directly use a conda environment that you created within Anaconda. Instead, you have to rely on the miniconda working environment that reticulate creates. It ensures your working environment has packages with ARM.\nAssuming you have Anaconda (see here) and reticulate installed already (just do install.packages(\"reticulate\")), you can easily create a conda environment like so:\n\nlibrary(reticulate)\n\nconda_create(\n  envname = \"testing2\",\n  packages = c(\"scikit-learn\"),\n  python_version = 3.8\n)\n\nThis creates an environment called testing2, and installs the Python pandas and numpy packages (besides the default Python packages that are automatically installed), as well as specifically installing Python version 3.8.\nIf you now head to Anaconda Navigator, you’ll see the environment under Environments.\n\n\n\nCreating a new conda environment\n\n\nNotice that hovering over the env name shows its location. By default when I first installed reticulate, it also downloads Miniconda with support for arm64 architecture for Python packages, storing it under ~/Library/r-miniconda-arm64.\n\n\n\nR’s output after installing Miniconda\n\n\nThat directory will store all conda environments under the envs directory.\n\n\n\nWhere all Miniconda environments are stored\n\n\nBy default, reticulate creates a arm64 environment called r-reticulate, and we just created another environment called testing2.\nNow we can activate this environment using use_condaenv by passing its location (again found from hovering or going to the Library):\n\nreticulate::use_condaenv(condaenv = \"~/Library/r-miniconda-arm64/envs/testing2\")\n\nAnd what about installing a particular version of a Python package within an environment? Earlier we installed scikit-learn, and by default it installs the latest version (which as of writing is 1.2.2).\nWhat if we wanted 1.2.1? Simply do this:\n\nreticulate::py_install(\n  packages = c(\"scikit-learn==1.2.1\"),\n  envname = \"~/Library/r-miniconda-arm64/envs/testing2\",\n  method = \"conda\")\n\nNow you must restart your R session. After doing so, R will reflect that upgraded (or in this case, downgraded) scikit-learn version."
  },
  {
    "objectID": "posts/reticulate-anaconda/index.html#the-best-of-both-worlds",
    "href": "posts/reticulate-anaconda/index.html#the-best-of-both-worlds",
    "title": "Using reticulate with Anaconda (for Mac M1 folks)",
    "section": "",
    "text": "I’ve been using Python more than ever compared to R over the last 1.5 years, but I’m still fond for R. Also a bit weary of the R vs Python debates. Won’t be rehashing the arguments, but for those who’d like the best of both worlds, this article discusses how to integrate R and Python with RStudio using the reticulate package, assuming you use Anaconda to handle your Python needs (like I do). The reticulate documentation wasn’t too clear on this, so perhaps this post will add a bit more context."
  }
]