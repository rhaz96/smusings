{
  "hash": "c42959ac47805944c06b48d527383645",
  "result": {
    "markdown": "---\ntitle: \"Using reticulate with Anaconda (for Mac M1 folks)\"\nauthor: \"Robert Hazell\"\ndate: \"2023-06-19\"\ncategories: [RStudio, R + Python]\n#image: \"/posts/post-with-code/image.jpg\"\n---\n\n\n## The Best of Both Worlds\n\nI've been using Python more than ever compared to R over the last 1.5 years, but I'm still fond for R. Also a bit weary of the R vs Python debates. Won't be rehashing the arguments, but for those who'd like the best of both worlds, this article discusses how to integrate R and Python with RStudio using the `reticulate` package, assuming you use Anaconda to handle your Python needs (like I do). The `reticulate` documentation wasn't too clear on this, so perhaps this post will add a bit more context.\n\n## Oh What Fun with M1\n\nAfter 5.5 years with an Intel-based MacBook Air, moving to the M1 MBA was a well-deserved upgrade. But with it comes some back-end changes to how software is run due to the M1 SoC. Such is the case with `reticulate` and Anaconda.\n\nThe basic issue is you can't directly use a conda environment that you created within Anaconda. Instead, you have to rely on the `miniconda` working environment that `reticulate` creates. It ensures your working environment has packages with ARM.\n\nAssuming you have Anaconda (see [here](https://www.anaconda.com/download/){target=\"_blank\"}) and `reticulate` installed already (just do `install.packages(\"reticulate\")`), you can easily create a conda environment like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n\nconda_create(\n  envname = \"testing2\",\n  packages = c(\"scikit-learn\"),\n  python_version = 3.8\n)\n```\n:::\n\n\nThis creates an environment called `testing2`, and installs the Python `pandas` and `numpy` packages (besides the default Python packages that are automatically installed), as well as specifically installing Python version 3.8.\n\nIf you now head to Anaconda Navigator, you'll see the environment under Environments.\n\n![Creating a new conda environment](Screenshot%202023-06-24%20at%202.36.47%20PM.png){fig-align=\"center\"}\n\nNotice that hovering over the env name shows its location. By default when I first installed `reticulate`, it also downloads Miniconda with support for arm64 architecture for Python packages, storing it under `~/Library/r-miniconda-arm64`\n\n![R's output after installing Miniconda](Screenshot%202023-06-24%20at%203.42.49%20PM.png){fig-align=\"center\"}\n\nThat directory will store all conda environments under the `envs` directory\n\n![Where all Miniconda environments are stored](Screenshot%202023-06-24%20at%203.53.50%20PM.png){fig-align=\"center\"}\n\nBy default, `reticulate` creates a arm64 environment called `r-reticulate`, and we just created another environment called `testing2`.\n\nNow we can activate this environment using `use_condaenv` by passing its location (again found from hovering or going to the Library):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::use_condaenv(condaenv = \"~/Library/r-miniconda-arm64/envs/testing2\")\n```\n:::\n\n\nAnd what about installing a particular version of a Python package within an environment? Earlier we installed `scikit-learn`, and by default it installs the latest version (which as of writing is 1.2.2).\n\nWhat if we wanted 1.2.1? Simply do this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::py_install(\n  packages = c(\"scikit-learn==1.2.1\"),\n  envname = \"~/Library/r-miniconda-arm64/envs/testing2\",\n  method = \"conda\")\n```\n:::\n\n\nNow you must restart your R session. After doing so, R will reflect that upgraded (or in this case, downgraded) scikit-learn version.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}